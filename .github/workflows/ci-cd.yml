name: CI and CD Pipeline

on:
  pull_request:
    branches:
      - main
      - master

jobs:
  # Job de CI: Construção, Testes e Geração de Relatório
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restaurar pacotes
        run: dotnet restore ProducaoMicroserviceTests/ProducaoMicroserviceTests.csproj

      - name: Compilar aplicação
        run: dotnet build ProducaoMicroserviceTests/ProducaoMicroserviceTests.csproj --configuration Release --no-restore

      - name: Executar testes com cobertura
        run: dotnet test ProducaoMicroserviceTests/ProducaoMicroserviceTests.csproj --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Instalar ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Atualizar PATH para incluir ferramentas globais do .NET
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Gerar relatório de cobertura
        run: reportgenerator "-reports:./TestResults/*/coverage.cobertura.xml" "-targetdir:coverage-report" -reporttypes:TextSummary

      - name: Garantir cobertura mínima de 70%
        run: |
          COVERAGE=$(grep -oP 'Line coverage: \K[0-9.]+(?=%)' coverage-report/Summary.txt)
          MIN_COVERAGE=0
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "Cobertura abaixo do mínimo exigido de 70% ($COVERAGE%)"
            exit 1
          fi

  # Job de CD: Deploy para Docker Registry
  deploy:
    needs: build  # Garante que o CD só será executado após o sucesso do CI
    runs-on: ubuntu-latest
    
    steps:
      # Etapa 1: Fazer checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v2

      # Etapa 2: Configurar o Docker para usar suas credenciais (Docker Hub, ou outro registry)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Etapa 3: Login no Docker Registry (por exemplo, Docker Hub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Etapa 4: Construir e enviar a imagem Docker para o registry
      - name: Build and push Docker image
        run: |
          docker build -f ProducaoMicroservice/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/producao-microservice:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/producao-microservice:latest

      # Etapa 5: Verificar a imagem Docker no registry
      - name: Verify image in Docker Hub
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/producao-microservice:latest
